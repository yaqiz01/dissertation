#!env/bin/python

import numpy as np
import matplotlib
matplotlib.use('agg')
import matplotlib.pyplot as plt
import pandas as pd
from cycler import cycler
from scipy import stats
import pydotplus as pydot

def savefig(fig, plot_path, **kws):
    if 'size' in kws:
        w,h, = kws['size']
        fig.set_size_inches(w,h)
    print("Generate {}".format(plot_path))
    plt.savefig(plot_path, format='pdf', dpi=900)

def plot_mlp():
    tab = pd.read_csv(
        'data/191119_145543_0800_Tst_sim_ef6cf6af_10f10351_4132476.csv',
        header=0, # row for header file
        encoding="utf-8-sig",
    )
    print(tab[['VPCU','VPMU']])
    pcu = tab.VPCU
    pmu = tab.VPMU
    ops = tab['param'].apply(lambda x: int(x.split('ops=List(')[1].split(",")[0]))
    fig, ax = plt.subplots()
    ax2 = ax.twinx()

    bar_width = 0.15
    opacity = 0.8
    index = np.arange(len(ops))

    colors = ['#003f5c', '#bc5090', '#ffa600']

    ax.bar(index, pcu, bar_width,
    alpha=opacity,
    color=colors[0],
    label='PCU')

    ax.bar(index, pmu, bar_width, bottom=pcu,
    alpha=opacity,
    color=colors[1],
    label='PMU')

    thrpt = 1.0 / (4 / ops)
    ax2.plot(index, thrpt,
    color=colors[2],
    label='Throughput',
    marker='d',
    )
    fig.legend(loc='upper left', bbox_to_anchor=(0.2,0.88))

    ax.set_xticks(index)
    ax.set_xticklabels(ops)
    ax.set_xlabel("Output Channel Parallelization")
    ax.set_ylabel("Number of VU")
    ax2.set_ylabel("Throughput (Gsample/s)",rotation=-90, labelpad=20)
    fig.subplots_adjust(left=0.2,right=0.8,bottom=0.2)
    savefig(fig, 'figs/mlp.pdf', size=(4,4))

def plot_gpu_slide():
    tab = pd.read_csv(
        'data/gpu_comp.csv',
        header=0, # row for header file
        encoding="utf-8-sig",
        sep=' *, *',
        engine='python',
    )
    def speedup(x):
        d = {}
        for met in ['Throughput','Latency']:
            sara = x[x.Compiler=='SARA'][met].values[0]
            gpu = x[x.Compiler!='SARA'][met].values[0]
            if met=='Throughput':
                d[met] = sara / gpu
                if x['Benchmark'].values[0] in ['LSTM (batch-32)','SqueezeNet (batch-1)']:
                    d['Norm'+met] = d[met] * 9
                else:
                    d['Norm'+met] = d[met]
            else:
                d[met] = gpu / sara
        return pd.Series(d)
    tab = tab.groupby('Benchmark').apply(speedup)
    tab = tab.sort_values('NormThroughput')
    tab = tab.reset_index()

    d = {}
    d['Benchmark'] = "Geo-Mean"
    for met in ['Throughput','Latency','NormThroughput']:
        d[met] = stats.gmean(tab[met].values)
    d = pd.Series(d)
    print(d)
    tab = tab.append(d,ignore_index=True)

    print(tab)
    apps = tab['Benchmark'].values

    fig, ax = plt.subplots()

    bar_width = 0.15
    opacity = 0.8
    index = np.arange(len(apps))

    colors = ['#003f5c', '#bc5090', '#ffa600']
    ax.set_prop_cycle(cycler(color=colors))

    ax.bar(index, tab['Latency'], bar_width,
    alpha=opacity,
    label='Latency')
    index = index + bar_width

    ax.bar(index, tab['NormThroughput'], bar_width,
    alpha=opacity,
    label='Throughput (Normalized to Resource)')
    ax.bar(index, tab['Throughput'], bar_width,
    alpha=opacity,
    label='Throughput')

    maxx = max(index)+0.3
    ax.plot([-0.2,maxx],[1,1],color='k',linestyle='--')
    ax.fill_between([len(index)-1.3,maxx], [0,0], [50,50], color='#e5e5e5')
    ax.set_ylim(0,1.1*max(tab['NormThroughput']))
    ax.set_xlim(-0.2,maxx)
    apps = [app.replace("(",'\n(') for app in apps]
    ax.set_xticks(index-bar_width/2)
    ax.set_xticklabels(apps,rotation=30)
    ax.set_ylabel("Improvement over V100")
    ax.legend()

    fig.subplots_adjust(bottom=0.2)
    fig.set_size_inches(7,3.5)
    plot_path = 'figs/slide_gpu.pdf'
    print("Generate {}".format(plot_path))
    plt.savefig(plot_path, format='pdf', dpi=900)


class Graph():
    def __init__(self, *args, **kws):
        self.args = args
        self.kws = kws
        self.graph = pydot.Dot(graph_type="digraph")
    def __enter__(self):
        return self

    def __exit__(self, type, value, traceback):
        self.write_pdf(*self.args, **self.kws)

    def write_pdf(self, *args, **kws):
        print("Generate to " + ' '.join(args))
        self.graph.write_pdf(*args, **kws)

    def node(self, name, **kws):
        attr = kws.copy()
        if "pos" in attr:
            x,y = attr["pos"]
            scale = 1.5
            x = x * scale
            y = y * scale
            attr["pos"] = "{},{}!".format(x,y)
        n  = pydot.Node(name, **attr)
        self.graph.add_node(n)
        return n
    
    def edge(self, src, dst, **kws):
        e = pydot.Edge(src, dst, **kws)
        self.graph.add_edge(e)
        return e

    def subgraph(self,*args, **kws):
        sub = pydot.Subgraph(*args, **kws)
        self.graph.add_subgraph(sub)
        return sub

    def get_node(self, id):
        return self.graph.get_node(id)

class DGraph(Graph):
    def __init__(self, *args, **kws):
        super().__init__(*args, **kws)
        self.pos = 0
    def vnode(self, name, **kws):
        n = self.node(name, pos="0,{}!".format(self.pos), **kws)
        self.pos += 1.5
        return n

    def bedge(self, src, dst, **kws):
        return self.edge(src,dst,style="dashed",**kws)

def plot_dep():
    nodeattr = {}
    nodeattr['shape']="circle"
    nodeattr['penwidth']=2
    nodeattr['fillcolor']="white"
    nodeattr['style']="filled"
    nodeattr['fontcolor']="black"
    nodeattr['fontname']="DejaVu Sans"
    edgeattr = {}
    edgeattr['penwidth'] = 2
    edgeattr['arrowhead'] = "vee"

    with DGraph('figs/dep.pdf') as G:
        W1 = G.node("W1", **nodeattr)
        R1 = G.node("R1", **nodeattr)

        G.edge(W1,R1,**edgeattr)
        G.bedge(R1,W1,**edgeattr)

    with DGraph('figs/dep1.pdf') as G:
        W0 = G.node("W0", **nodeattr)
        R0 = G.node("R0", **nodeattr)
        W1 = G.node("W1", **nodeattr)
        R1 = G.node("R1", **nodeattr)

        G.edge(W0,R0,**edgeattr)
        G.bedge(R0,W0,**edgeattr)
        G.edge(W1,R1,**edgeattr)
        G.bedge(R1,W1,**edgeattr)

    with DGraph('figs/dep2.pdf', prog='neato') as G:
        W0 = G.node("W0", pos=(0,1), **nodeattr)
        R0 = G.node("R0", pos=(0,0), **nodeattr)
        W1 = G.node("W1", pos=(1,1), **nodeattr)
        R1 = G.node("R1", pos=(1,0), **nodeattr)

        G.edge(W0,R0,**edgeattr)
        G.bedge(R0,W0,**edgeattr)
        G.edge(W1,R0,**edgeattr)
        G.bedge(R0,W1,**edgeattr)
        G.edge(W1,R1,**edgeattr)
        G.bedge(R1,W1,**edgeattr)
        G.edge(W0,R1,**edgeattr)
        G.bedge(R1,W0,**edgeattr)

    with DGraph('figs/dep3.pdf') as G:
        W1 = G.node("W1", **nodeattr)
        W2 = G.node("W2", **nodeattr)
        R1 = G.node("R1", **nodeattr)

        G.edge(W1,W2,**edgeattr)
        G.edge(W1,R1,**edgeattr)
        G.bedge(W2,W1,**edgeattr)
        G.bedge(R1,W1,**edgeattr)


partnodeattr = {}
partnodeattr['shape']="circle"
partnodeattr['penwidth']=3
partnodeattr['fillcolor']="#3f65b8"
partnodeattr['style']="filled"
partnodeattr['fontcolor']="white"
partnodeattr['fontname']="Raleway bold"

partsubgraphattr = {}
partsubgraphattr['color'] = 'black'
partsubgraphattr['style'] = 'rounded'

partedgeattr = {}
partedgeattr['style'] = 'bold'

def create_part_dfg():
    graph = Graph()
    A = graph.node("A", **partnodeattr)
    B = graph.node("B", **partnodeattr)
    C = graph.node("C", **partnodeattr)
    D = graph.node("D", **partnodeattr)
    E = graph.node("E", **partnodeattr)
    F = graph.node("F", **partnodeattr)
    G = graph.node("G", **partnodeattr)
    H = graph.node("H", **partnodeattr)
    edge1 = graph.edge(A,B,**partedgeattr)
    edge2 = graph.edge(A,C,**partedgeattr)
    edge3 = graph.edge(B,D,**partedgeattr)
    edge4 = graph.edge(C,D,**partedgeattr)
    edge5 = graph.edge(B,E,**partedgeattr)
    edge6 = graph.edge(E,F,**partedgeattr)
    edge7 = graph.edge(D,F,**partedgeattr)
    edge8 = graph.edge(H,D,**partedgeattr)
    edge9 = graph.edge(H,B,**partedgeattr)
    edge10 = graph.edge(G,C,**partedgeattr)
    edge11 = graph.edge(G,F,**partedgeattr)
    return graph, partnodeattr, partsubgraphattr

def plot_part_dfg():
    graph, nodeattr, subgraphattr = create_part_dfg()
    graph.write_pdf('figs/part_dfg.pdf')

def set_enode(graph, name):
    node = graph.get_node(name)[0]
    node.set_fillcolor("#ffcc5c")
    node.set_fontcolor("black")

def plot_part():
    graph, nodeattr, subgraphattr = create_part_dfg()
    cu1 = graph.subgraph('cluster_a', **subgraphattr)
    cu1.add_node(graph.get_node("A")[0])
    cu1.add_node(graph.get_node("B")[0])
    cu1.add_node(graph.get_node("H")[0])
    cu1.add_node(graph.get_node("G")[0])
    cu1.add_node(graph.get_node("C")[0])
    cu2 = graph.subgraph('cluster_b', **subgraphattr)
    cu2.add_node(graph.get_node("E")[0])
    cu2.add_node(graph.get_node("D")[0])
    cu2.add_node(graph.get_node("F")[0])
    set_enode(graph, "B")
    set_enode(graph, "C")
    set_enode(graph, "G")
    set_enode(graph, "H")
    graph.graph.obj_dict['nodes'].clear()

    graph.write_pdf('figs/part.pdf')

def plot_part2():
    graph, nodeattr, subgraphattr = create_part_dfg()
    cu1 = graph.subgraph('cluster_a', **subgraphattr)
    cu1.add_node(graph.get_node("A")[0])
    cu1.add_node(graph.get_node("B")[0])
    cu1.add_node(graph.get_node("H")[0])
    cu1.add_node(graph.get_node("G")[0])
    cu1.add_node(graph.get_node("C")[0])
    cu1.add_node(graph.get_node("D")[0])
    cu2 = graph.subgraph('cluster_b', **subgraphattr)
    cu2.add_node(graph.get_node("E")[0])
    cu2.add_node(graph.get_node("F")[0])
    set_enode(graph, "B")
    set_enode(graph, "D")
    set_enode(graph, "G")
    graph.graph.obj_dict['nodes'].clear()
    graph.write_pdf('figs/part2.pdf')

def plot_part_invalid():
    graph, nodeattr, subgraphattr = create_part_dfg()
    cu1 = graph.subgraph('cluster_a',**subgraphattr)
    cu1.add_node(graph.get_node("A")[0])
    cu1.add_node(graph.get_node("B")[0])
    cu1.add_node(graph.get_node("H")[0])
    cu1.add_node(graph.get_node("E")[0])
    cu1.add_node(graph.get_node("F")[0])
    cu1.add_node(graph.get_node("D")[0])
    cu2 = graph.subgraph('cluster_c', **subgraphattr)
    cu2.add_node(graph.get_node("C")[0])
    cu2.add_node(graph.get_node("G")[0])
    set_enode(graph, "A")
    set_enode(graph, "C")
    set_enode(graph, "G")
    graph.graph.obj_dict['nodes'].clear()
    graph.write_pdf('figs/part_invalid.pdf')

def create_part_cycle():
    graph = Graph()
    A = graph.node("A", **partnodeattr)
    B = graph.node("B", **partnodeattr)
    C = graph.node("C", **partnodeattr)
    D = graph.node("D", **partnodeattr)
    E = graph.node("E", **partnodeattr)
    F = graph.node("F", **partnodeattr)
    G = graph.node("G", **partnodeattr)
    # graph.edge(A,B,**partedgeattr)
    graph.edge(A,C,**partedgeattr)
    graph.edge(B,D,**partedgeattr)
    graph.edge(C,D,**partedgeattr)
    graph.edge(B,E,**partedgeattr)
    graph.edge(E,F,**partedgeattr)
    graph.edge(D,F,**partedgeattr)
    graph.edge(G,C,**partedgeattr)
    graph.edge(G,E,**partedgeattr)
    graph.edge(F,C,color="#ff4000", **partedgeattr)
    return graph, partnodeattr, partsubgraphattr

def plot_part_cycle_valid():
    graph, nodeattr, subgraphattr = create_part_cycle()
    cu1 = graph.subgraph('cluster_a', **subgraphattr)
    cu1.add_node(graph.get_node("A")[0])
    cu1.add_node(graph.get_node("B")[0])
    cu1.add_node(graph.get_node("G")[0])
    cu1.add_node(graph.get_node("C")[0])
    cu1.add_node(graph.get_node("D")[0])
    cu2 = graph.subgraph('cluster_b', **subgraphattr)
    cu2.add_node(graph.get_node("E")[0])
    cu2.add_node(graph.get_node("F")[0])
    set_enode(graph, "B")
    set_enode(graph, "D")
    set_enode(graph, "G")
    set_enode(graph, "F")
    graph.graph.obj_dict['nodes'].clear()

    graph.write_pdf('figs/part_cycle_valid.pdf')

def plot_part_cycle_invalid():
    graph, nodeattr, subgraphattr = create_part_cycle()
    cu1 = graph.subgraph('cluster_a', **subgraphattr)
    cu1.add_node(graph.get_node("B")[0])
    cu1.add_node(graph.get_node("G")[0])
    cu1.add_node(graph.get_node("D")[0])
    cu2 = graph.subgraph('cluster_b', **subgraphattr)
    cu2.add_node(graph.get_node("A")[0])
    cu2.add_node(graph.get_node("C")[0])
    cu2.add_node(graph.get_node("E")[0])
    cu2.add_node(graph.get_node("F")[0])
    set_enode(graph, "B")
    set_enode(graph, "G")
    set_enode(graph, "D")
    set_enode(graph, "C")
    graph.graph.obj_dict['nodes'].clear()

    graph.write_pdf('figs/part_cycle_invalid.pdf')

def plot_part_cycle():
    graph, nodeattr, subgraphattr = create_part_cycle()
    graph.write_pdf('figs/part_cycle.pdf')

def plot_merge():
    nodeattr = {}
    nodeattr['shape']="circle"
    nodeattr['penwidth']=2
    nodeattr['fillcolor']="white"
    nodeattr['style']="filled"
    nodeattr['fontcolor']="black"
    nodeattr['fontname']="DejaVu Sans"
    nodeattr['fillcolor']="#ffcc5c"
    nodeattr['fixedsize']='true'
    nodeattr['width']=0.5
    nodeattr['height']=0.5

    lattr = {}
    lattr['shape']="planetext"
    lattr['fillcolor']="none"
    lattr['color']="none"
    lattr['fontcolor']="black"
    lattr['fontname']="DejaVu Sans"

    edgeattr = {}
    edgeattr['penwidth'] = 2
    edgeattr['arrowhead'] = "vee"

    with Graph('figs/merge.pdf') as G:
        BI0 = G.node("BI0", label="<BI<SUB>0</SUB>>", **lattr)
        BO0 = G.node("BO0", label="<BO<SUB>0</SUB>>", **lattr)
        s0 = G.node("s0", label="S", **nodeattr)
        G.edge(BI0,s0,**edgeattr)
        G.edge(BO0,s0,**edgeattr)
        # s1 = G.node("s1", label="<S<SUP>-1</SUP>>", **nodeattr)
        BI1 = G.node("BI1", label="<BI<SUB>1</SUB>>", **lattr)
        BO1 = G.node("BO1", label="<BO<SUB>1</SUB>>", **lattr)
        s1 = G.node("s1", label="S", **nodeattr)
        G.edge(BI1,s1,**edgeattr)
        G.edge(BO1,s1,**edgeattr)

        OR = G.node("OR", **nodeattr)
        G.edge(s0,OR,**edgeattr)
        G.edge(s1,OR,**edgeattr)

def main():

    # plot_mlp()
    # plot_gpu_slide()
    # plot_dep()

    # plot_part_dfg()
    # plot_part()
    # plot_part2()
    # plot_part_invalid()

    # plot_part_cycle()
    # plot_part_cycle_valid()
    # plot_part_cycle_invalid()

    plot_merge()

main()
